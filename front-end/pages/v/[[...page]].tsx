import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  NextPage,
  PreviewData,
} from "next";
import Head from "next/head";
import { NextRouter } from "next/router";
import { ParsedUrlQuery } from "querystring";
import Footer from "../../src/components/layout/Footer";
import Header from "../../src/components/layout/Header";
import { getPathName, parseJwt } from "../../src/modules/commonModule";
import { WholeWrapper } from "../../src/components/styles/CommonComponents";
import { AuthTokenInfo } from "../../src/models/auth.entity";
import { CompanyApproval } from "../../src/models/company.entity";
import FileUpload from "../../src/components/page/SignUp/section/fileUpload";
import Approval from "../../src/components/page/SignUp/section/approval";
import Main from "../../src/components/page/Main";
import { UseLink } from "../../src/configure/router.entity";
import { useRouter } from "next/dist/client/router";
import MyPageAccount from "../../src/components/page/MyPageAccount";
import MyPageWorker from "../../src/components/page/MyPageWorker";
import Test from "../../src/components/page/Test";
import { _MainProps } from "../../src/configure/_props.entity";
import AdminCompanies from "../../src/components/page/admin/companies";
import axios, { AxiosError, AxiosResponse } from "axios";

/**
 * 메인: cApproval에 따른 메인 컴포넌트
 * @param props
 * @returns
 */
const MainComponent: NextPage<_MainProps> = (props) => {
  switch (props.tokenValue.cApproval) {
    case CompanyApproval.BEFORE:
      return <FileUpload />;

    case CompanyApproval.ING:
      return <Approval />;

    default:
      return <SubComponent {...props} />;
  }
};

/**
 * 메인: url query에 따른 서브 컴포넌트
 * @param props
 * @returns
 */
const SubComponent: NextPage<_MainProps> = (props) => {
  const router: NextRouter = useRouter();
  const pathName: string = getPathName(router.asPath);

  switch (pathName) {
    case UseLink.MAIN:
      return <Main {...props} />;

    case UseLink.MYPAGE_ACCOUNT:
      return <MyPageAccount {...props} />;

    case UseLink.MYPAGE_WORKER:
      return <MyPageWorker {...props} />;

    case UseLink.TEST:
      return <Test {...props} />;

    case UseLink.ADMIN_COMPANIES:
      return <AdminCompanies {...props} />;
  }
};

/**
 * 메인: 페이지
 * @param props
 * @returns
 */
const MainPage: NextPage<_MainProps> = (props) => {
  return (
    <>
      <Head>
        <title>MK SOLUTION</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WholeWrapper minHeight={`100vh`} ju={`space-between`}>
        <Header {...props} />
        <MainComponent {...props} />
        <Footer />
      </WholeWrapper>
    </>
  );
};

export default MainPage;

export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>
) => {
  const url: string = context.resolvedUrl; // 현재 url (query 제외)
  const useUrlArray: string[] = Object.values(UseLink); // 사용가능한 url 배열
  const pathName: string = getPathName(url); // pathName 가져오기

  if (context.req.cookies.mk_token) {
    const tokenValue: AuthTokenInfo = parseJwt(context.req.cookies.mk_token);

    if (useUrlArray.indexOf(pathName) === -1) {
      return {
        notFound: true,
      };
    } else {
      switch (pathName) {
        case UseLink.TEST:
          // console.log(context.req.cookies.mk_token);
          const res = await axios
            .get(`http://172.30.1.9:7001/auth/profile`, {
              headers: {
                Cookie: `mk_token=${context.req.cookies.mk_token}`,
              },
              withCredentials: true,
            })
            .then((res: AxiosResponse<unknown, any>) => res.data);
          // .catch((err: AxiosError) => {
          //   console.log("err =========================");
          //   console.log(err.code);
          // });

          console.log("!!!", res);
          return {
            props: {
              tokenValue,
            },
          };

        default:
          return {
            props: {
              tokenValue,
            },
          };
      }
      // return {
      //   props: {
      //     tokenValue,
      //   },
      // };
    }
    // 토큰 확인 - 없을 경우, 로그인 화면으로 리디렉트
  } else {
    return {
      redirect: {
        permanent: false,
        destination: UseLink.INDEX,
      },
    };
  }
};
