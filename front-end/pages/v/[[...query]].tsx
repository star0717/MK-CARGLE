import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Footer from "../../src/components/layout/Footer";
import Header from "../../src/components/layout/Header";
import { parseJwt } from "../../src/modules/parseJwt";
import { WholeWrapper } from "../../src/components/styles/CommonComponents";
import { AuthTokenInfo } from "../../src/models/auth.entity";
import { CompanyApproval } from "../../src/models/company.entity";
import FileUpload from "../../src/components/page/SignUp/section/fileUpload";
import Approval from "../../src/components/page/SignUp/section/approval";
import Main from "../../src/components/page/Main";
import { MainRoute, SubRoute } from "../../src/models/router.entity";
import { useRouter } from "next/dist/client/router";
import MyPageAccount from "../../src/components/page/MyPageAccount";
import MyPageWorker from "../../src/components/page/MyPageWorker";

interface ViewProps {
  route: any;
  tokenValue: any;
}

/**
 * cApproval 에 따른 메인 컴포넌트
 * @param props
 * @returns
 */
const MainComponent: NextPage<ViewProps> = (props) => {
  // 필요한 props 재정의
  const tokenValue = props.tokenValue;

  switch (tokenValue.cApproval) {
    case CompanyApproval.BEFORE:
      return <FileUpload {...props} />;
      break;

    case CompanyApproval.ING:
      return <Approval />;
      break;

    default:
      return <SubComponent {...props} />;
      break;
  }
};

const SubComponent: NextPage<ViewProps> = (props) => {
  // const router = useRouter();

  const route = props.route;
  // const route = router.query;
  const mainRoute = route.query ? route.query[0] : null;
  const subRoute = route.query ? route.query[1] : null;
  console.log("전체", route);
  console.log("메인", mainRoute);
  console.log("서브", subRoute);

  switch (mainRoute) {
    case null:
      return <Main {...props} />;
      break;

    case MainRoute.MYPAGE:
      if (subRoute === SubRoute.ACCOUNT) {
        return <MyPageAccount {...props} />;
      }
      if (subRoute === SubRoute.WORKER) {
        return <MyPageWorker {...props} />;
      }
    default:
      // router.push("/404");
      break;
  }
};

const MainPage: NextPage<ViewProps> = (props) => {
  return (
    <>
      <Head>
        <title>MK SOLUTION</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WholeWrapper minHeight={`100vh`} ju={`space-between`}>
        <Header {...props} />
        <MainComponent {...props} />
        <Footer />
      </WholeWrapper>
    </>
  );
};

export default MainPage;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const route = context.query;

  if (context.req.cookies.mk_token) {
    const tokenValue: AuthTokenInfo = parseJwt(context.req.cookies.mk_token);

    return {
      props: {
        route,
        tokenValue,
      },
    };
    // 토큰 확인 - 없을 경우, 로그인 화면으로 리디렉트
  } else {
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
    };
  }
};
