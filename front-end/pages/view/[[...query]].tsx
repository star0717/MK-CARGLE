import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Footer from "../../src/components/layout/Footer";
import Header from "../../src/components/layout/Header";
import SignUp from "../../src/components/page/SignUp";
import Main from "../../src/components/page/Main";
import Find from "../../src/components/page/Find";
import Account from "../../src/components/page/MyPageAccount";
import { parseJwt } from "../../src/modules/parseJwt";
import FileUpload from "../../src/components/page/SignUp/section/fileUpload";
import Approval from "../../src/components/page/SignUp/section/approval";
import { WholeWrapper } from "../../src/components/styles/CommonComponents";
import { AuthTokenInfo } from "../../src/models/auth.entity";
import { CompanyApproval } from "../../src/models/company.entity";
import { Query } from "../../src/models/query.entity";

interface ViewProps {
  query: any;
  tokenValue?: any;
}

const Componentitem: NextPage<ViewProps> = (props) => {
  // props 재정의
  const query = props.query.query;
  const tokenValue: AuthTokenInfo = props?.tokenValue;

  // url(query) 구분
  const main = query[0];
  const sub = query[1] ? query[1] : "";

  switch (main) {
    case Query.SIGNUP:
      return <SignUp {...props} />;
    case Query.MAIN:
      if (tokenValue.cApproval === CompanyApproval.BEFORE) {
        return <FileUpload {...props} />;
      } else if (tokenValue.cApproval === CompanyApproval.ING) {
        return <Approval {...props} />;
      } else {
        return <Main {...props} />;
      }
    case Query.FIND:
      return <Find {...props} />;
    case Query.ACCOUNT:
      return <Account {...props} />;
    default:
      return <SignUp {...props} />;
  }
};

const View: NextPage<ViewProps> = (props) => {
  return (
    <>
      <Head>
        <title>MK SOLUTION</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WholeWrapper minHeight={`100vh`} ju={`space-between`}>
        <Header {...props} />
        <Componentitem {...props} />
        <Footer />
      </WholeWrapper>
    </>
  );
};

export default View;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const query = context.query;
  const main = query.query ? query.query[0] : null;

  // 토큰 확인 - 없을 경우, 로그인 화면으로 리디렉트
  if (!context.req.cookies.mk_token) {
    if (main !== "signup" && main !== "find" && main !== "account") {
      return {
        redirect: {
          permanent: false,
          destination: "/",
        },
      };
    } else {
      return {
        props: {
          query,
        },
      };
    }
  } else {
    const tokenValue: AuthTokenInfo = parseJwt(context.req.cookies.mk_token);

    return {
      props: {
        query,
        tokenValue,
      },
    };
  }
};
